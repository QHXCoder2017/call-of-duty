Python

class Solution:
    def addBinary(self, a: str, b: str) -> str:
        if len(a) < len(b):    #以长的二进制字符串为遍历起点
            temp = a
            a = b
            b = temp
        a = a[::-1]           
        b = b[::-1]
        carry = 0             
        new_binary = ""
        for index, num in enumerate(a):     
            if index > len(b) - 1:          #判断短的二进制字符串是否越界
                b_sum = 0
            else:
                b_sum = int(b[index])
            new_binary = new_binary + str((int(num) + b_sum + carry) % 2)  #二进制加法运算
            if int(num) + b_sum + carry > 1:     #是否进位
                carry = 1
            else:
                carry = 0
        if carry == 1:        #最高位是否进位
            new_binary = new_binary + "1"     
        return new_binary[::-1]
        
C++

class Solution
{
public:
    string addBinary(string a, string b)
    {
        int len1 = a.size();
        int len2 = b.size();
        if(len1 == 0)
        {
            return b;
        }
        if(len2 == 0)
        {
            return a;
        }
        string ret;
        int carry = 0;
        int index1 = len1-1;
        int index2 = len2-1;
        while(index1 >= 0 && index2 >= 0)
        {
            int num = (a[index1] - '0') + (b[index2] - '0') + carry;
            carry = num / 2;
            num = num % 2;
            index1--;
            index2--;
            ret.insert(ret.begin(), num + '0');
        }
        if(index1 < 0 && index2 < 0)
        {
            if(carry==1)
            {
                ret.insert(ret.begin(), carry + '0');
                return ret;
            }
        }
        while(index1 >= 0)
        {
            int num = (a[index1]- '0') + carry;
            carry = num / 2;
            num = num % 2;
            index1--;
            ret.insert(ret.begin(), num + '0');
        }
        while(index2 >= 0)
        {
            int num = (b[index2]-'0') + carry;
            carry = num / 2;
            num = num % 2;
            index2--;
            ret.insert(ret.begin(), num + '0');
        }
        if(carry == 1)
        {
            ret.insert(ret.begin(), carry + '0');
        }
        return ret;
    }
};
