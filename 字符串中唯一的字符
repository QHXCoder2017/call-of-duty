Python

class Solution:
    def firstUniqChar(self, s):
        dict = {}
        for i in range(len(s)):
            if s[i] not in dict:  # 如果字典里没有这个键
                dict[s[i]] = 1  # 存入这个键并令值为1
            else:
                dict[s[i]] = dict[s[i]] + 1  # 字典的值+1
        for i in range(len(s)):
            if dict[s[i]] == 1:  # 如果字典中哪个键的值为1，即只出现一次的字母
                return i  # 返回其索引
        return -1

C++

class Solution
{
public:
    int firstUniqChar(string s)
    {
        int n=s.size();
        if(n==0)
            return -1;
        int a[26] = {0};
        for(int i = 0; i < n; i++)
        {
            a[s[i]-'a']++;
        }
        for(int i = 0; i < n; i++)
        {
            if(a[s[i]-'a']==1)
                return i;
        }
        return -1;
    }
};

class Solution 
{
public:
   int firstUniqChar(string s)
   {
       unordered_map<char, int> m; //unordered_map和map类似，都是存储的key-value的值，可以通过key快速索引到value。不同的是unordered_map不会根据key的大小进行排序，存储时是根据key的hash值判断元素是否相同，即unordered_map内部元素是无序的。
       for (char c : s) m[c]++;
       for (int i = 0; i < s.size(); i++)
       {
          if (m[s[i]] == 1) return i;
       }
       return -1;
   }
};
