Python

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def binaryTreePaths(self, root: TreeNode) -> List[str]:
        if not root:
            return []
        res, stack = [], [(root, "")]
        while stack:
            node, ls = stack.pop()
            if not node.left and not node.right:
                res.append(ls + str(node.val))
            if node.left:
                stack.append((node.left, ls + str(node.val) + "->"))
            if node.right:
                stack.append((node.right, ls + str(node.val) + "->"))
        return res
        
class Solution:
    def binaryTreePaths(self, root: TreeNode) -> List[str]:
        if not root:
            return []
        if not root.left and not root.right:
            return [str(root.val)]
        pathList = []
        if root.left:
            pathList += self.binaryTreePaths(root.left)
        if root.right:
            pathList += self.binaryTreePaths(root.right)
        for index, path in enumerate(pathList):
            pathList[index] = str(root.val) + "->" + path
        return pathList
        
/**
 * Definition for a binary tree node.
 * struct TreeNode
 {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution 
{
public:
    vector<string> binaryTreePaths(TreeNode* root) 
    {
        vector<string> res;
        if(root==NULL)
            return res;
        if(root->left==NULL && root->right==NULL)
            res.push_back(to_string(root->val));
        vector<string> leftS = binaryTreePaths(root->left);
        vector<string> rightS = binaryTreePaths(root->right);
        for(int i=0; i<leftS.size(); i++)
            res.push_back(to_string(root->val) + "->" + leftS[i]);
        for(int i=0; i<rightS.size(); i++)
            res.push_back(to_string(root->val) + "->" + rightS[i]);
        return res;
    }
};
