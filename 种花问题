Python

class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        if n == 0:
            return True
        flowerbed = [0] + flowerbed + [0]
        for i in range(0, len(flowerbed)-1):
            if flowerbed[i] == flowerbed[i-1] == flowerbed[i+1] == 0:
                flowerbed[i] == 1
            n -= 1
            if n == 0:
                return True
        return False

C++

class Solution
{
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n)
    {
        if(flowerbed.empty()) return false;
        flowerbed.insert(flowerbed.begin(), 0);
        flowerbed.push_back(0);
        int m = 0;
        for(int i=0; i<flowerbed.size()-2; i++)
        {
            if(flowerbed[i] == 0 && flowerbed[i+1] == 0 && flowerbed[i+2] == 0)
            {
                m++;
                i++;
            }
        }
        return m>=n;
    }
};
