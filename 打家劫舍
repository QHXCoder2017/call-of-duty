Python

class Solution:
    def rob(self, nums):
        n = len(nums)
        res = [0 for i in range(n)]     
        if n == 0:
            return 0
        if n == 1:
            return nums[0]
        if n == 2:
            return max(nums)
        else:
            res[0] = nums[0]
            res[1] = max(nums[0], nums[1])
        for i in range(2, len(nums)):
            res[i] = max(res[i-2] + nums[i], res[i-1])
        return res[n-1]
        
C++

class Solution 
{
public:
    int rob(vector<int>& nums)
    {
        int rob = 0, notRob = 0, n = nums.size();
        for (int i = 0; i < n; ++i)
        {
            int preRob = rob, preNotRob = notRob;
            rob = preNotRob + nums[i];
            notRob = max(preRob, preNotRob); 
        }
     return max(rob, notRob);
    }
};
