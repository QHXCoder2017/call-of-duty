Python

class Solution:
    def countPrimes(self, n: int) -> int:
        if n < 3:
            return 0
        res = [True] * n
        res[0] = res[1] = False
        for i in range(2, int(n**0.5)+1):
            if res[i]:
                res[i * i: n: i] = [False] * len(res[i * i: n: i])
        return sum(res)
        
C++

class Solution 
{
public:
    int countPrimes(int n)
    {
        bool flag[n+1];
        for(int i=0; i<n+1; i++)
        {
            flag[i] = true;  // 标记数组初始化
        }
        int count = 0;
        for (int i=2; i<n; i++)
        {
            if(flag[i]) // 如果这个数是质数
            {
                for(int j=i+i; j<n; j+=i) // 那么该质数的所有倍数都不是质数了
                {
                    flag[j] = false;
                } 
                count++;
            }
        }
        return count;
    }
